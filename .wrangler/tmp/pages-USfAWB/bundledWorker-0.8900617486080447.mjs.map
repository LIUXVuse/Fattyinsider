{
  "version": 3,
  "sources": ["../../../_worker.js", "C:/Users/PONY/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "C:/Users/PONY/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-aM9VwY/middleware-insertion-facade.js", "C:/Users/PONY/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-aM9VwY/middleware-loader.entry.ts"],
  "sourceRoot": "E:\\projects\\faty\\fatty-chat\\.wrangler\\tmp\\pages-USfAWB\\bundledWorker-0.8900617486080447.mjs",
  "sourcesContent": ["// _worker.js - Modified for AutoRAG (ai-search), Serper Web Search, and Hybrid Deepseek Mode with Error Handling\r\n\r\n// Helper function to format response for frontend\r\nfunction formatResponse(content, role = \"assistant\", finish_reason = \"stop\") {\r\n  // Basic sanitization or validation could be added here if needed\r\n  const finalContent = typeof content === 'string' ? content : '(\u65E0\u6548\u7684\u56DE\u61C9\u5185\u5BB9)';\r\n  return {\r\n    choices: [\r\n      {\r\n        message: { role, content: finalContent },\r\n        finish_reason,\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\n// --- AutoRAG Interaction (Using ai-search for both modes now in hybrid path) ---\r\nasync function callAutoRag(endpoint, token, query) {\r\n    console.log(`[Worker AutoRAG] Calling AutoRAG (ai-search mode) with query: \"${query}\"`);\r\n    const url = new URL(endpoint);\r\n    // Ensure we target the ai-search endpoint\r\n    if (!url.pathname.endsWith('/ai-search')) {\r\n         url.pathname = url.pathname.replace(/\\/(search)?$/, '') + '/ai-search';\r\n         console.log(`[Worker AutoRAG DEBUG] Adjusted URL to ai-search: ${url.toString()}`);\r\n    } else {\r\n         console.log(`[Worker AutoRAG DEBUG] Using existing ai-search URL: ${url.toString()}`);\r\n    }\r\n\r\n    const payload = {\r\n        query: query,\r\n        stream: false,\r\n    };\r\n    console.log(`[Worker AutoRAG DEBUG] Sending payload to AutoRAG (${url.toString()}):`, JSON.stringify(payload));\r\n\r\n    const response = await fetch(url.toString(), {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(payload)\r\n    });\r\n\r\n    console.log(`[Worker AutoRAG] Received response status from AutoRAG: ${response.status}`);\r\n    // Log headers only if needed for debugging\r\n    // console.log(\"[Worker AutoRAG DEBUG] Received response headers:\", JSON.stringify(Object.fromEntries(response.headers.entries())));\r\n\r\n    if (!response.ok) {\r\n        let errorBody = \"(Failed to read AutoRAG error body)\";\r\n        try { errorBody = await response.text(); } catch (e) { /* ignore */ }\r\n        console.error(`[Worker AutoRAG] AutoRAG API Error: ${response.status}. Body: ${errorBody}`);\r\n        throw new Error(`AutoRAG request failed with status ${response.status}: ${errorBody}`);\r\n    }\r\n\r\n    const contentType = response.headers.get(\"content-type\") || \"\";\r\n    if (!contentType.includes(\"application/json\")) {\r\n        const textBody = await response.text();\r\n        console.error(`[Worker AutoRAG] Received non-JSON Content-Type from AutoRAG: ${contentType}. Body:`, textBody.substring(0, 500));\r\n        throw new Error(`AutoRAG returned non-JSON response: ${textBody}`);\r\n    }\r\n\r\n    console.log(`[Worker AutoRAG DEBUG] Attempting to parse AutoRAG response as JSON...`);\r\n    const result = await response.json();\r\n    console.log(`[Worker AutoRAG DEBUG] Parsed AutoRAG JSON result:`, JSON.stringify(result).substring(0, 500) + '...');\r\n\r\n    // --- Extract answer from AutoRAG response ---\r\n    let answerContent = null; // Use null to indicate not found initially\r\n    if (result && result.result && result.result.response) { // Primary expected format\r\n        answerContent = result.result.response;\r\n    } else if (result && result.answer) { // Alternative format 1\r\n        answerContent = result.answer;\r\n    } else if (result.choices && result.choices[0]?.message?.content) { // Alternative format 2 (OpenAI-like)\r\n        answerContent = result.choices[0].message.content;\r\n    }\r\n\r\n    if (answerContent === null) {\r\n         console.warn(\"[Worker AutoRAG DEBUG] Could not find expected answer in AutoRAG /ai-search JSON response. Structure:\", JSON.stringify(result).substring(0, 300));\r\n         // Decide how to handle: throw error or return null? Let's return null for now.\r\n         // throw new Error(\"AutoRAG response structure unexpected, could not extract answer.\");\r\n    } else {\r\n        console.log(`[Worker AutoRAG DEBUG] Extracted AutoRAG answer content (length: ${answerContent?.length ?? 0})`);\r\n    }\r\n    return answerContent; // Return only the answer string or null\r\n}\r\n\r\n// --- Serper Web Search Interaction ---\r\nasync function callSerperSearch(apiKey, query) {\r\n    const SERPER_API_URL = \"https://google.serper.dev/search\";\r\n    console.log(`[Worker Serper] Calling Serper API with query: \"${query}\"`);\r\n\r\n    const payload = JSON.stringify({\r\n        q: query,\r\n        num: 5 // Request top 5 results (adjust as needed)\r\n    });\r\n\r\n    try {\r\n        const response = await fetch(SERPER_API_URL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'X-API-KEY': apiKey,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: payload\r\n        });\r\n\r\n        console.log(`[Worker Serper] Received response status from Serper: ${response.status}`);\r\n\r\n        if (!response.ok) {\r\n            let errorBody = \"(Failed to read Serper error body)\";\r\n            try { errorBody = await response.text(); } catch (e) { /* ignore */ }\r\n            console.error(`[Worker Serper] Serper API Error: ${response.status}. Body: ${errorBody}`);\r\n            // Don't throw, just return null so Deepseek can proceed without search results\r\n            return null;\r\n        }\r\n\r\n        const results = await response.json();\r\n        console.log(`[Worker Serper DEBUG] Parsed Serper JSON result (showing first few):`, JSON.stringify(results.organic?.slice(0,2) ?? results).substring(0, 500) + '...');\r\n\r\n        // Format results for the prompt (e.g., title + snippet)\r\n        if (results.organic && results.organic.length > 0) {\r\n            return results.organic.slice(0, 5) // Take top 5 organic results\r\n                .map((item, index) => `[\u641C\u5C0B\u7D50\u679C ${index + 1}] ${item.title}\\n${item.snippet || '(\u7121\u6458\u8981)'}\\n\u4F86\u6E90: ${item.link || '(\u7121\u9023\u7D50)'}`)\r\n                .join(\"\\n\\n\");\r\n        } else {\r\n            console.log(\"[Worker Serper] No organic results found in Serper response.\");\r\n            return null; // No useful results\r\n        }\r\n    } catch (e) {\r\n        console.error(\"[Worker Serper] FATAL Error calling Serper API:\", e);\r\n        return null; // Return null on any fetch error\r\n    }\r\n}\r\n\r\n\r\n// --- Deepseek Interaction ---\r\nasync function callDeepseek(apiKey, messages, autoRagAnswer = null, searchResults = null, autoRagError = null) {\r\n    const DEEPSEEK_API_URL = \"https://api.deepseek.com/chat/completions\";\r\n    console.log(\"[Worker Deepseek] Calling Deepseek API...\");\r\n\r\n    // --- Construct Prompt for Deepseek ---\r\n    let finalSystemPrompt;\r\n    let addedInfo = false; // Flag to track if any useful info was added\r\n\r\n    // Check if we have any context (RAG answer, Search results, or even a RAG error counts as context)\r\n    const hasContext = autoRagAnswer || searchResults || autoRagError;\r\n    const isDeepseekOnlyMode = !hasContext; // Helper variable\r\n\r\n    if (hasContext) {\r\n        // Use the detailed prompt for RAG/Hybrid modes\r\n        finalSystemPrompt = \"\u4F60\u662F\u80A5\u5B85\u8001\u53F8\u6A5F AI (FattyInsiderAI)\uFF0C\u4E00\u500B\u670D\u52D9\u65BC\u53F0\u7063\u6210\u5E74\u5411 Podcast \u7BC0\u76EE\u300C\u80A5\u5B85\u8001\u53F8\u6A5F\u300D\u7684\u52A9\u7406\u3002\u4F60\u7684\u56DE\u7B54\u98A8\u683C\u61C9\u8A72\u8F15\u9B06\u6709\u8DA3\u3002\u8ACB\u7E3D\u662F\u4F7F\u7528\u7E41\u9AD4\u4E2D\u6587\u56DE\u7B54\u3002\";\r\n        finalSystemPrompt += \"\\n\\n\u8ACB\u6574\u5408\u4EE5\u4E0B\u8CC7\u8A0A\u4F86\u56DE\u7B54\u4F7F\u7528\u8005\u7684\u554F\u984C\uFF1A\";\r\n\r\n        if (autoRagAnswer) {\r\n            finalSystemPrompt += `\\n\\n1. **\u7BC0\u76EE\u6458\u8981\u91CD\u9EDE (\u8ACB\u512A\u5148\u53C3\u8003\u6B64\u5167\u5BB9\u56DE\u7B54\u7BC0\u76EE\u76F8\u95DC\u554F\u984C\uFF0C\u4E26\u76E1\u53EF\u80FD\u4FDD\u7559\u5982 '(\u51FA\u81EA S3EPXX)' \u7684\u4F86\u6E90\u6A19\u8A3B)**:\\n---\\n${autoRagAnswer}\\n---`;\r\n            addedInfo = true;\r\n        } else if (autoRagError) {\r\n            finalSystemPrompt += `\\n\\n1. **\u6CE8\u610F\uFF1A\u7121\u6CD5\u5F9E\u7BC0\u76EE\u6458\u8981\u8CC7\u6599\u5EAB\u7372\u53D6\u76F8\u95DC\u8CC7\u8A0A\u3002** \u8ACB\u4E3B\u8981\u6839\u64DA\u4EE5\u4E0B\u7DB2\u8DEF\u641C\u5C0B\u7D50\u679C\u548C\u4F60\u7684\u901A\u7528\u77E5\u8B58\u56DE\u7B54\u3002`;\r\n             console.log(`[Worker Deepseek DEBUG] AutoRAG failed with error: ${autoRagError}`); // Log the original error\r\n        } else {\r\n            finalSystemPrompt += `\\n\\n1. **\u7BC0\u76EE\u6458\u8981\u8CC7\u6599\u5EAB\u4E2D\u672A\u627E\u5230\u76F8\u95DC\u8CC7\u8A0A\u3002** \u8ACB\u4E3B\u8981\u6839\u64DA\u4EE5\u4E0B\u7DB2\u8DEF\u641C\u5C0B\u7D50\u679C\u548C\u4F60\u7684\u901A\u7528\u77E5\u8B58\u56DE\u7B54\u3002`;\r\n        }\r\n\r\n        if (searchResults) {\r\n            finalSystemPrompt += `\\n\\n2. **\u7DB2\u8DEF\u641C\u5C0B\u7D50\u679C (\u7528\u65BC\u88DC\u5145\u6642\u4E8B\u3001\u901A\u7528\u77E5\u8B58\u6216\u7BC0\u76EE\u672A\u63D0\u53CA\u7684\u7D30\u7BC0)**:\\n---\\n${searchResults}\\n---`;\r\n            addedInfo = true;\r\n        } else {\r\n            if (!autoRagAnswer && hasContext) { // Add note only if RAG context was expected but missing/failed\r\n                finalSystemPrompt += `\\n\\n2. **\u7DB2\u8DEF\u641C\u5C0B\u4E5F\u672A\u57F7\u884C\u6216\u672A\u627E\u5230\u7D50\u679C\u3002**`;\r\n            }\r\n        }\r\n\r\n        // Final instruction based on what info was available\r\n        if (addedInfo) {\r\n             finalSystemPrompt += \"\\n\\n\u8ACB\u7528\u81EA\u7136\u3001\u53E3\u8A9E\u5316\u7684\u65B9\u5F0F\u7D9C\u5408\u4EE5\u4E0A\u8CC7\u8A0A\uFF0C\u63D0\u4F9B\u4E00\u500B\u5B8C\u6574\u4E14\u6709\u8DA3\u7684\u56DE\u7B54\u3002\";\r\n             if (autoRagAnswer && searchResults) { // Only add conflict instruction if both are present\r\n                 finalSystemPrompt += \"\u5982\u679C\u7BC0\u76EE\u6458\u8981\u548C\u7DB2\u8DEF\u641C\u5C0B\u7D50\u679C\u6709\u885D\u7A81\uFF0C\u8ACB\u512A\u5148\u63A1\u4FE1\u7BC0\u76EE\u6458\u8981\u7684\u5167\u5BB9\uFF0C\u6216\u5A49\u8F49\u6307\u51FA\u53EF\u80FD\u7684\u5DEE\u7570\u3002\";\r\n             } else if (autoRagAnswer) {\r\n                 finalSystemPrompt += \"\u8ACB\u76E1\u53EF\u80FD\u4FDD\u7559\u5982 '(\u51FA\u81EA S3EPXX)' \u7684\u4F86\u6E90\u6A19\u8A3B\u3002\";\r\n             }\r\n        } else {\r\n             // Neither RAG nor Search provided info, but AutoRAG might have failed\r\n             finalSystemPrompt += \"\\n\\n\u8ACB\u6839\u64DA\u4F60\u7684\u901A\u7528\u77E5\u8B58\u56DE\u7B54\u3002\";\r\n        }\r\n    } else {\r\n         // No context provided (Deepseek-only mode)\r\n         finalSystemPrompt = \"\u4F60\u662F\u4E00\u500B\u4F7F\u7528\u7E41\u9AD4\u4E2D\u6587\u56DE\u7B54\u554F\u984C\u7684\u901A\u7528 AI \u52A9\u7406\u3002\u8ACB\u76F4\u63A5\u3001\u6E96\u78BA\u5730\u56DE\u7B54\u4F7F\u7528\u8005\u7684\u554F\u984C\u3002\u5982\u679C\u4F7F\u7528\u8005\u8981\u6C42\u7FFB\u8B6F\uFF0C\u8ACB\u5728\u56DE\u7B54\u4E2D\u540C\u6642\u63D0\u4F9B\u539F\u6587\u548C\u8B6F\u6587\u4EE5\u65B9\u4FBF\u5C0D\u7167\u3002\";\r\n         console.log(\"[Worker Deepseek DEBUG] Using generic system prompt for Deepseek-only mode.\");\r\n    }\r\n\r\n    // Prepare messages for Deepseek: Add the constructed system prompt and user/assistant history\r\n    let messagesForDeepseek = [{ role: \"system\", content: finalSystemPrompt }];\r\n    messagesForDeepseek = messagesForDeepseek.concat(messages); // Add conversation history\r\n\r\n    // Optional: Clean up history slightly? Maybe remove previous AI answers if prompt gets too long?\r\n    // For now, keep full history.\r\n\r\n    console.log(\"[Worker Deepseek DEBUG] Final system prompt for Deepseek:\", finalSystemPrompt);\r\n    console.log(\"[Worker Deepseek DEBUG] Message history being sent (excluding new system prompt):\", JSON.stringify(messages, null, 2));\r\n\r\n    const payload = {\r\n        model: \"deepseek-chat\",\r\n        messages: messagesForDeepseek,\r\n        stream: false\r\n    };\r\n\r\n    const response = await fetch(DEEPSEEK_API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${apiKey}`\r\n        },\r\n        body: JSON.stringify(payload)\r\n    });\r\n\r\n    console.log(`[Worker Deepseek] Received response status from Deepseek: ${response.status}`);\r\n\r\n    if (!response.ok) {\r\n        let errorBody = \"(Failed to read Deepseek error body)\";\r\n        try { errorBody = await response.text(); } catch (e) { /* ignore */ }\r\n        console.error(`[Worker Deepseek] Deepseek API Error: ${response.status}. Body: ${errorBody}`);\r\n        throw new Error(`Deepseek request failed with status ${response.status}: ${errorBody}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log(\"[Worker Deepseek DEBUG] Parsed Deepseek JSON result:\", JSON.stringify(result).substring(0, 500) + '...');\r\n    // Extract the actual response content\r\n     if (result.choices && result.choices[0] && result.choices[0].message && result.choices[0].message.content) {\r\n         return result.choices[0].message.content;\r\n     } else {\r\n         console.warn(\"[Worker Deepseek DEBUG] Could not find expected content in Deepseek JSON response.\");\r\n         throw new Error(\"Deepseek response structure unexpected, could not extract answer.\");\r\n     }\r\n}\r\n\r\n\r\n/**\r\n * Handles chat requests, routing based on mode.\r\n */\r\nasync function handleChatRequest(request, env) {\r\n    console.log(\"[Worker Request] Entering handleChatRequest...\");\r\n    let requestBody;\r\n    try {\r\n        requestBody = await request.json();\r\n        console.log(\"[Worker Request DEBUG] Parsed request body.\");\r\n    } catch (e) {\r\n        console.error(\"[Worker Request] Invalid JSON in request body:\", e);\r\n        return new Response(JSON.stringify({ error: \"\u65E0\u6548\u7684 JSON \u8BF7\u6C42\u4F53\" }), { status: 400, headers: { \"Content-Type\": \"application/json\" } });\r\n    }\r\n\r\n    const messages = requestBody.messages;\r\n    const mode = requestBody.mode || 'autorag'; // Default to 'autorag'\r\n    console.log(`[Worker Request] Received mode: ${mode}`);\r\n\r\n    if (!messages || !Array.isArray(messages) || messages.length === 0) {\r\n        console.error(\"[Worker Request] Invalid or missing 'messages' in request body.\");\r\n        return new Response(JSON.stringify({ error: \"\u8BF7\u6C42\u4F53\u4E2D\u7F3A\u5C11\u6709\u6548\u7684 'messages' \u5B57\u6BB5\" }), { status: 400, headers: { \"Content-Type\": \"application/json\" } });\r\n    }\r\n\r\n    const lastUserMessage = messages.findLast(msg => msg.role === 'user');\r\n    if (!lastUserMessage || !lastUserMessage.content) {\r\n        console.error(\"[Worker Request] No user message found in history.\");\r\n        return new Response(JSON.stringify({ error: \"\u804A\u5929\u6B77\u53F2\u4E2D\u627E\u4E0D\u5230\u4F7F\u7528\u8005\u8A0A\u606F\" }), { status: 400, headers: { \"Content-Type\": \"application/json\" } });\r\n    }\r\n    const userQuery = lastUserMessage.content;\r\n    console.log(`[Worker Request DEBUG] Extracted user query: \"${userQuery}\"`);\r\n\r\n    // --- Get Environment Variables ---\r\n    const { AUTORAG_ENDPOINT, AUTORAG_API_TOKEN, DEEPSEEK_API_KEY, SERPER_API_KEY } = env;\r\n\r\n    console.log(`[Worker ENV DEBUG] AUTORAG_ENDPOINT: ${AUTORAG_ENDPOINT ? 'Loaded' : 'MISSING!'}`);\r\n    console.log(`[Worker ENV DEBUG] AUTORAG_API_TOKEN: ${AUTORAG_API_TOKEN ? 'Loaded' : 'MISSING!'}`);\r\n    console.log(`[Worker ENV DEBUG] DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY ? 'Loaded' : 'MISSING!'}`);\r\n    console.log(`[Worker ENV DEBUG] SERPER_API_KEY: ${SERPER_API_KEY ? 'Loaded' : 'MISSING!'}`); // Check Serper key\r\n\r\n    if (!AUTORAG_ENDPOINT || !AUTORAG_API_TOKEN) {\r\n        console.error(\"[Worker ENV] AutoRAG environment variables missing.\");\r\n        return new Response(JSON.stringify({ error: \"\u5F8C\u7AEF AutoRAG \u8A2D\u5B9A\u672A\u5B8C\u6210\" }), { status: 500, headers: { \"Content-Type\": \"application/json\" } });\r\n    }\r\n\r\n    // Filter message history (remove system prompts before sending to APIs)\r\n    const conversationHistory = messages.filter(msg => msg.role !== 'system');\r\n\r\n    try {\r\n        if (mode === 'deepseek') {\r\n            console.log(\"[Worker Logic] Entering Deepseek-Only Mode...\");\r\n            if (!DEEPSEEK_API_KEY) {\r\n                console.error(\"[Worker ENV] DEEPSEEK_API_KEY is missing for Deepseek-only mode.\");\r\n                return new Response(JSON.stringify({ error: \"\u5F8C\u7AEF Deepseek API \u91D1\u9470\u672A\u8A2D\u5B9A\" }), { status: 500, headers: { \"Content-Type\": \"application/json\" } });\r\n            }\r\n\r\n            // Call Deepseek directly without RAG or Search context\r\n            const deepseekAnswer = await callDeepseek(DEEPSEEK_API_KEY, [...conversationHistory], null, null, null);\r\n            const formattedResponse = formatResponse(deepseekAnswer);\r\n            console.log(\"[Worker Logic DEBUG] Sending formatted Deepseek response to client (Deepseek-Only Mode).\");\r\n            return new Response(JSON.stringify(formattedResponse), { status: 200, headers: { 'Content-Type': 'application/json' } });\r\n\r\n        } else if (mode === 'hybrid') {\r\n            console.log(\"[Worker Logic] Entering Hybrid Mode (AutoRAG -> Serper -> Deepseek)...\");\r\n            if (!DEEPSEEK_API_KEY) {\r\n                console.error(\"[Worker ENV] DEEPSEEK_API_KEY is missing for Hybrid mode.\");\r\n                return new Response(JSON.stringify({ error: \"\u5F8C\u7AEF Deepseek API \u91D1\u9470\u672A\u8A2D\u5B9A\" }), { status: 500, headers: { \"Content-Type\": \"application/json\" } });\r\n            }\r\n             let serperKeyAvailable = true; // Assume available initially\r\n             if (!SERPER_API_KEY) {\r\n                console.error(\"[Worker ENV] SERPER_API_KEY is missing for Hybrid mode web search.\");\r\n                console.warn(\"[Worker Logic] SERPER_API_KEY missing, proceeding without web search.\");\r\n                serperKeyAvailable = false;\r\n             }\r\n\r\n            let autoRagAnswer = null;\r\n            let autoRagError = null; // Variable to store potential AutoRAG error message\r\n\r\n            // 1. Call AutoRAG (ai-search) and catch errors\r\n            console.log(\"[Worker Logic] Step 1: Calling AutoRAG ai-search...\");\r\n            try {\r\n                 autoRagAnswer = await callAutoRag(AUTORAG_ENDPOINT, AUTORAG_API_TOKEN, userQuery);\r\n                 if (autoRagAnswer === null) {\r\n                     console.warn(\"[Worker Logic] AutoRAG did not return a valid answer (returned null). Continuing...\");\r\n                 }\r\n            } catch (e) {\r\n                console.error(\"[Worker Logic] AutoRAG call failed:\", e.message);\r\n                autoRagError = e.message; // Store the error message\r\n                autoRagAnswer = null; // Ensure answer is null on error\r\n            }\r\n\r\n\r\n            // 2. Call Serper (if key exists)\r\n             let searchResults = null;\r\n             if (serperKeyAvailable) { // Use the flag check\r\n                console.log(\"[Worker Logic] Step 2: Calling Serper Web Search...\");\r\n                searchResults = await callSerperSearch(SERPER_API_KEY, userQuery);\r\n                 if (searchResults === null) {\r\n                     console.warn(\"[Worker Logic] Web search failed or returned no results.\");\r\n                 }\r\n             } else {\r\n                 console.log(\"[Worker Logic] Step 2: Skipping web search (SERPER_API_KEY not found).\");\r\n             }\r\n\r\n\r\n            // 3. Call Deepseek with RAG answer, Search results, and potential RAG error\r\n            console.log(\"[Worker Logic] Step 3: Calling Deepseek for synthesis...\");\r\n            const deepseekFinalAnswer = await callDeepseek(DEEPSEEK_API_KEY, [...conversationHistory], autoRagAnswer, searchResults, autoRagError); // Pass autoRagError\r\n\r\n            // 4. Format and return Deepseek response\r\n            console.log(`[Worker Logic DEBUG] Extracted Deepseek final answer (Hybrid Mode, length: ${deepseekFinalAnswer.length})`);\r\n            const formattedResponse = formatResponse(deepseekFinalAnswer);\r\n            console.log(\"[Worker Logic DEBUG] Sending formatted Deepseek response to client (Hybrid Mode).\");\r\n            return new Response(JSON.stringify(formattedResponse), { status: 200, headers: { 'Content-Type': 'application/json' } });\r\n\r\n        } else { // Default 'autorag' mode\r\n            console.log(\"[Worker Logic] Entering AutoRAG Mode (default)...\");\r\n            // Call AutoRAG (ai-search)\r\n            const autoRagAnswer = await callAutoRag(AUTORAG_ENDPOINT, AUTORAG_API_TOKEN, userQuery);\r\n\r\n            if (autoRagAnswer === null) {\r\n                // Handle case where AutoRAG fails or returns unexpected structure\r\n                console.error(\"[Worker Logic] AutoRAG failed to provide an answer in AutoRAG mode.\");\r\n                 return new Response(JSON.stringify({ error: \"\u7121\u6CD5\u5F9E AutoRAG \u7372\u53D6\u56DE\u7B54\", detail: \"Response structure might be incorrect or API failed.\" }), { status: 500, headers: { 'Content-Type': 'application/json' }});\r\n            }\r\n\r\n            // Format and return AutoRAG response\r\n            const formattedResponse = formatResponse(autoRagAnswer);\r\n            console.log(\"[Worker Logic DEBUG] Sending formatted AutoRAG response to client (AutoRAG Mode).\");\r\n            return new Response(JSON.stringify(formattedResponse), { status: 200, headers: { 'Content-Type': 'application/json' } });\r\n        }\r\n\r\n    } catch (e) {\r\n        console.error(\"[Worker Logic] FATAL Error during processing:\", e);\r\n        if (e.stack) console.error(\"[Worker Logic DEBUG] Error Stack:\", e.stack);\r\n        const errorMsg = \"\u8655\u7406\u8ACB\u6C42\u6642\u767C\u751F\u5167\u90E8\u932F\u8AA4 (Worker)\";\r\n        const errorDetail = e.message || \"Unknown error\";\r\n        return new Response(JSON.stringify({ error: errorMsg, detail: errorDetail }), { status: 500, headers: { 'Content-Type': 'application/json' } });\r\n    }\r\n}\r\n\r\n// _worker.js entry point\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const pathname = url.pathname;\r\n    const method = request.method;\r\n\r\n    console.log(`[Worker Entry] Request: ${method} ${pathname}`);\r\n\r\n    // API route\r\n    if (pathname === \"/api/chat\" && method === \"POST\") {\r\n        return handleChatRequest(request, env);\r\n    }\r\n\r\n    // Static assets route\r\n    if (method === \"GET\") {\r\n        try {\r\n            if (!env.ASSETS) {\r\n                console.error(\"[Worker Static] env.ASSETS is not defined.\");\r\n                return new Response(\"\u975C\u614B\u8CC7\u6E90\u670D\u52D9\u672A\u914D\u7F6E\", { status: 500 });\r\n            }\r\n            return await env.ASSETS.fetch(request);\r\n        } catch (e) {\r\n            if (pathname === '/' || pathname === '/index.html') {\r\n                console.error(`[Worker Static] Critical asset not found: ${pathname}`, e.message);\r\n                return new Response(\"\u627E\u4E0D\u5230\u4E3B\u8981\u9801\u9762 (index.html)\", { status: 404 });\r\n            } else {\r\n                return new Response(\"\u8CC7\u6E90\u672A\u627E\u5230 (Not Found)\", { status: 404 });\r\n            }\r\n        }\r\n    }\r\n\r\n    // Other methods\r\n    console.warn(`[Worker Entry] Method ${method} not allowed for path '${pathname}'.`);\r\n    return new Response(\"\u65B9\u6CD5\u4E0D\u5141\u8A31 (Method Not Allowed)\", { status: 405 });\r\n  },\r\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"E:\\\\projects\\\\faty\\\\fatty-chat\\\\_worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\PONY\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\PONY\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"E:\\\\projects\\\\faty\\\\fatty-chat\\\\_worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"E:\\\\projects\\\\faty\\\\fatty-chat\\\\.wrangler\\\\tmp\\\\bundle-aM9VwY\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\PONY\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"E:\\\\projects\\\\faty\\\\fatty-chat\\\\.wrangler\\\\tmp\\\\bundle-aM9VwY\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"E:\\\\projects\\\\faty\\\\fatty-chat\\\\.wrangler\\\\tmp\\\\bundle-aM9VwY\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
